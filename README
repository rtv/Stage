****************************************************************************
* README.stage  - Richard Vaughan - Stage-1.3       
*                                                                          
* $Id: README,v 1.4.4.1 2002-12-10 00:33:11 rtv Exp $    
****************************************************************************

** Release notes **

End user:
+ New devices and terminology to match Player-1.3
+ New model configurations (AmigoBot, Pioneer bumpers, etc).
+ Capture JPEG and PPM stills and MPEG movies of the Stage window in real time
+ More entity properties can be set in the worldfile (see manual for details)
+ Worldfiles can specify multiple bitmaps that respect property settings such as pose
+ Can start with clock stopped (-s flag) - start/stop the clock with SIGUSR1
+ Many bugfixes (e.g. fast mode works properly)
+ Many performance improvements, particularly with the new libRTK GUI

Developer:
+ Autotools build environment
+ GUI hooks simplify writing new GUIs (GNOME2 skeleton included)
+ Simplified entity registration/creation (see src/library.cc)
+ Builds on Solaris (GUI not tested)

** README ***

This README provides a quick-start guide to building and running
Stage.  Consult the Stage User Manual for full details.

-- What is Stage? ---------------------------------------------------------

Stage simulates mobile robots and sensors in a two-dimensional
bitmapped environment containing a variety of objects. Robots are
controlled through Player. Player provides a powerful, flexible
interface to a variety of robot hardware; Stage provides virtual
devices for Player. Various sensor models are provided, including
sonar, scanning laser rangefinder, color blob tracking from a
pan-tilt-zoom camera and odometry. Several controllers designed in
Stage have been demonstrated to work on real robots.

Stage is developed at USC Robotics Research Lab and HRL Laboratories
to support research into multi-agent intelligent autonomous systems.

-- How to get Stage -----------------------------------------------------

The primary source for Player and Stage is:

http://playerstage.sourceforge.net

-- Ownership ------------------------------------------------------------

Stage is released under the GNU General Public License.

Stage programs, images, examples, source code and documentation are
copyright (c) the authors.

These fine people worked on Stage:

Richard Vaughan
Andrew Howard
Brian Gerkey
Kasper Stoy
Boyoon Jung
Jakob Fredslund

Stage's development is supported at the University of Southern
California and HRL Laboratories LLC by DARPA IPTO.

-- Whats here? ------------------------------------------------------------

stage    - the simulation engine.
       
Some example environments and setup files are provided, along with a
manual and this bootstrap documentation

-- Requirements ------------------------------------------------------------ 

Developed and tested under Linux kernel 2.4, glibc-2.  Written in
reasonable ANSII/POSIX so should compile elsewhere. No promises, but
people have found it to work on a variety of set-ups.

Requires: Player [http://playerstage.sourceforge.net], X11R6, GTK.

-- Compiling ---------------------------------------------------------------

We use the standard GNU build system: download; extract; configure;
make install. 

0) Obtain and install Player (http://robotics.usc.edu/player)

1) unpack the Stage tarball with

$ tar xzvf Stage-<version>.tgz

(the OS X version of tar doesn't support the '-z' option, so you have
to gunzip first, then 'tar xvf Stage-<version>.tar')

2) configure stage:

Stage needs to know the path to your Player installation or build
directory, and to librtk and your X11 color database if you want to
use the GUI. We use the GNU autoconf system to handle these
configurations, plus various optional components and cross-platform
compatibility issues. If you installed Player and librtk in their
default locations, and you want a normal installation,
the defaults should work:

$ cd stage-<version>
# configure

To see all the available configuration options do:

$ configure --help

3) compile stage:

$ make

will build the binary src/stage.

Optionally, as you can do:
 
$ make install

this will install the executables in $HOME/stage-<version>/bin/
(unless you otherwise set the installation target as an option
to `configure')

-- Running ---------------------------------------------------------------

To run stage, first make sure the Player executable can be found in
your path.

To run stage itself do:

$ stage [options] <filename.world>

The .world file specifies what stage must simulate. The command-line
options are described in the manual, and can be listed by doing:

$ stage --help

(or equivalently)
$ stage -?

To try out Stage with an example world, change to the installation
directory and do:

$ bin/stage worlds/simple.world

-- Configuration file ----------------------------------------------------

The user defines a world to simulate in Stage's configuration
(*.world) file. The world file format is documented in the manual, but
you can get the idea from looking at the examples.

--------------------------------------------------------------------------

Enjoy, and let us know what you do with Stage.

 - Richard Vaughan, Andrew Howard, Brian Gerkey






