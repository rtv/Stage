/*
 *  Stage : a multi-robot simulator.
 *  Copyright (C) 2001, 2002 Richard Vaughan, Andrew Howard and Brian Gerkey.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
/*
 * Desc: This class implements the server, or main, instance of Stage.
 * Author: Richard Vaughan, Andrew Howard
 * Date: 6 Jun 2002
 * CVS info: $Id: server.cc,v 1.44.4.1 2003-01-31 01:39:32 rtv Exp $
 */
#if HAVE_CONFIG_H
  #include <config.h>
#endif
#if HAVE_STRINGS_H
  #include <strings.h>
#endif

#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <math.h>
#include <netdb.h>
#include <netinet/in.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <termios.h>
#include <unistd.h>

#define DEBUG
#define VERBOSE

const int STG_MAX_CONNECTIONS = 100;
const int HOSTNAME_SIZE  = 128;
const int LISTENQ = 128;

//const long int MILLION = 1000000L;

// the master-server's listening socket
struct pollfd listen_poll;

// the current connection details
struct pollfd connection_polls[ STG_MAX_CONNECTIONS ];
int connection_count;


char hostname[HOSTNAME_SIZE];

// dummy timer signal func
void TimerHandler( int val )
{
#ifdef VERBOSE
  PRINT_DEBUG( "TIMER HANDLER" );
#endif

  //g_timer_events++;

  // re-install signal handler for timing
  if( signal( SIGALRM, &TimerHandler ) == SIG_ERR )
    {
      PRINT_ERR("failed to install signal handler");
      exit( -1 );
    }

  PRINT_DEBUG( "timer expired );
}  

void CatchSigPipe( int signo )
{
#ifdef VERBOSE
  puts( "** SIGPIPE! **" );
#endif
  exit( -1 );
}


bool InitServer( int argc, char** argv );
{ 
  PRINT_DEBUG( "Start" );

  PRINT_DEBUG( "Resolving hostname" );
  //////////////////////////////////////////////////////////////////////
  // FIGURE OUT THE DEFAULT FULL HOST NAME & ADDRESS
  // the default hostname is this host's name
  char current_hostname[ HOSTNAME_SIZE ];
  strncpy( current_hostname, hostname, HOSTNAME_SIZE );
  
  // maintain a connection to the nameserver - speeds up lookups
  sethostent( true );
  
  struct hostent* info = gethostbyname( current_hostname );
  assert( info );
  struct in_addr current_hostaddr;
  
  // make sure this looks like a regular internet address
  assert( info->h_length == 4 );
  assert( info->h_addrtype == AF_INET );
  
  // copy the address out
  memcpy( &current_hostaddr.s_addr, info->h_addr_list[0], 4 ); 

  ////////////////////////////////////////////////////////////////////
  PRINT_DEBUG( "Setting up connection server" );

  listen_poll.fd = socket(AF_INET, SOCK_STREAM, 0);
  listen_poll.events = POLLIN; // notify me when a connection request happens
  
  struct sockaddr_in servaddr;  
  bzero(&servaddr, sizeof(servaddr));
  
  servaddr.sin_family      = AF_INET;
  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  servaddr.sin_port        = htons(m_port);
  
  // switch on the re-use-address option
  const char on = 1;
  setsockopt( listen_poll.fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on) );
  
  if( bind(listen_poll.fd, (SA *) &servaddr, sizeof(servaddr) )  < 0 )
  {
    perror("CStageServer::SetupConnectionServer()");
    std::cout << "Port " << m_port 
         << " is in use. Quitting (but try again in a few seconds)." 
         << std::endl;
    exit( -1 );
  }
  
  // catch signals generated by socket closures
  signal( SIGPIPE, CatchSigPipe );
  
  // listen for requests on this socket
  // we poll it in ListenForPoseConnections()
  assert( listen( listen_poll.fd, LISTENQ) == 0 );


  PRINT_DEBUG( "End" );
}

CStageServer::~CStageServer( void )
{
  // close all connections
}


bool StageServer::ParseCmdLine( int argc, char** argv )
{
  for( int a=1; a<argc-1; a++ )
  {
    // DIS/ENABLE Player
    if((strcmp( argv[a], "-n" ) == 0 )|| 
       (strcmp( argv[a], "--noplayer" ) == 0))
    {
      m_run_player = false;
      printf( "[No Player]" );
    }

    // FAST MODE - run as fast as possible - don't attempt t match real time
    if((strcmp( argv[a], "--fast" ) == 0 ) || 
       (strcmp( argv[a], "-f" ) == 0))
    {
      m_real_timestep = 0.0;
      printf( "[Fast]" );
    }

    // set the stop time
    if(!strcmp(argv[a], "-t"))
      {
	m_stoptime = atoi(argv[++a]);
	printf("[Stop time: %d]",m_stoptime);
      }
    
    // START WITH CLOCK STOPPED
    if( strcmp( argv[a], "-s" ) == 0 )
      {
	this->start_disabled = true;
	printf( "[Clock stopped (start with SIGUSR1)]" );
      }
  }
  
  return true;
}

void Server::ListenForConnections( void )
{
  int readable = 0;
  
  // poll for connection requests with a very fast timeout
  if((readable = poll( &listen_poll, 1, 0 )) == -1)
    {
      if( errno != EINTR ) // timer interrupts are OK
	{ 
	  perror( "Stage warning: poll error (not EINTR)");
	  return;
	}
    }
  
  bool success = true;
  
  // if the socket had a request
  if( readable && (listen_poll.revents & POLLIN ) ) 
    {
      // set up a socket for this connection
      struct sockaddr_in cliaddr;  
      bzero(&cliaddr, sizeof(cliaddr));
#if PLAYER_SOLARIS
      int clilen;
#else
      socklen_t clilen;
#endif
      
      clilen  = sizeof(cliaddr);
      int connfd = 0;
      
      connfd = accept( listen_poll.fd, (SA *) &cliaddr, &clilen);
      
      
      // set the dirty flag for all entities on this connection
      DirtyEntities( m_pose_connection_count );
      
      
      // determine the type of connection, sync or async, by reading
      // the first byte
      char b = 0;
      int r = 0;
      
      if( (r = read( connfd, &b, 1 )) < 1 ) 
	{
	  puts( "failed to read sync type byte. Quitting\n" );
	  if( r < 0 ) perror( "read error" );
	  exit( -1 );
	}
      
      // record the total bytes input
      g_bytes_input += r; 
      
      // if this is a syncronized connection, increase the sync counter 
      switch( b )
	{
	case STAGE_SYNC: 
#ifdef VERBOSE      
	  printf( "\nStage: SYNC connection accepted (id: %d fd: %d)\n", 
		  m_pose_connection_count, connfd );
	  fflush( stdout );
#endif            
	  success = true;
	  break;
	  
	default: printf( "Stage: unknown sync on %d. Closing connection\n",
			 connfd  );
	  close( connfd );
	  success = false;
	  break;
	}
      
      //
      if( success )
	{
	  connection_polls[ m_pose_connection_count ].fd = connfd;
	  connection_polls[ m_pose_connection_count ].events = POLLIN;
	  connection_count++;
	}
    }
}


void CStageServer::Write( void )
{
  // write out the collection of each connection's  dirty properties on each connection.

}

