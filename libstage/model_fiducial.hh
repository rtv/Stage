#include "model.hh"

class StgModelFiducial : public StgModel
{
public:
  // constructor
  StgModelFiducial( StgWorld* world,
		    StgModel* parent, 
		    stg_id_t id, CWorldFile* wf );
  
  // destructor
  virtual ~StgModelFiducial( void );
  
  //virtual void Startup( void );
  //virtual void Shutdown( void );
  virtual void Update( void );
  virtual void Load( void );
 
  stg_meters_t max_range_anon; //< maximum detection range
  stg_meters_t max_range_id; ///< maximum range at which the ID can be read
  stg_meters_t min_range; ///< minimum detection range
  stg_radians_t fov; ///< field of view 
  stg_radians_t heading; ///< center of field of view
  
  /// only detect fiducials with a key string that matches this one
  /// (defaults to NULL)
  char* key;
  
  // an array of stg_fiducial_t structs generated by the sensor
  GArray* data;
  
  // if neighbor is visible, add him to the fiducial scan
  void AddModelIfVisible( StgModelFiducial* him );
  
//   // static wrapper function can be used as a function pointer
//   static void AddModelIfVisibleStatic( gpointer key, 
// 				       StgModelFiducial* him, 
// 				       StgModelFiducial* me )
//   { if( him != me ) me->AddNeighborIfVisible( him ); };

};
