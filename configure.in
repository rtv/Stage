dnl -----------------------------------------------------------------------
dnl Stage Autoconf script
dnl $Id: configure.in,v 1.35.4.10 2003-08-19 00:58:41 rtv Exp $
dnl -----------------------------------------------------------------------

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.cc)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $host in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)

dnl Define this so that we can refer to it twice below
dnl PS_VERSION is the major.minor version that is common for Player and
dnl Stage. All revisions with this major.minor version must be forwards 
dnl and backwards compatible. This number is used for the install directories.
define(PS_VERSION,1.4)

dnl STAGE_VERSION is major.minor.revision - unique to this release and 
dnl independent of Player's revision number - 'dev' should be appended for 
dnl unreleased development versions
define(STAGE_VERSION,PS_VERSION.dev)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(stage,STAGE_VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Checks for header files of required libraries
AC_CHECK_HEADERS(stdint.h strings.h)

dnl Check for types that are not defined on some systems
dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply dnl use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Checks for library functions.
AC_CHECK_LIB(z, gzopen)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(m, isinf)

dnl build mplementations of these in libreplace.a if these are 
dnl missing
AC_REPLACE_FUNCS(poll dirname scandir)

PKG_CHECK_MODULES(RTK, librtk2 >= 2.2,
AC_DEFINE(INCLUDE_RTK2,1,[building RTK GUI]),
AC_MSG_WARN([no suitable RTK was found. ])
)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

dnl where's the X11-style color database?
AC_CHECK_FILE([/usr/X11R6/lib/X11/rgb.txt],
  CDB="\"/usr/X11R6/lib/X11/rgb.txt\"",
  AC_CHECK_FILE([/usr/openwin/lib/X11/rgb.txt],
    CDB="\"/usr/openwin/lib/X11/rgb.txt\"",
    CDB="\"/usr/X11R6/lib/X11/rgb.txt\""))
AC_ARG_WITH(color, [   --with-color=file      Location of X11-style color file],
CDB="\"$with_color\"",)
AC_DEFINE_UNQUOTED(COLOR_DATABASE,$CDB,[the X11-style color database])

dnl should tests (e.g., RTK) be built?
AC_ARG_WITH(tests, [  --with-tests            Build tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

AC_OUTPUT(Makefile 
          src/Makefile 
          worlds/Makefile 
          replace/Makefile
          tools/Makefile
	  stage.pc
	  stagecpp.pc)

#          src/gnomegui/Makefile 
#	  src/models/Makefile	
#	  src/rtkgui/Makefile
#	  src/sio/Makefile
