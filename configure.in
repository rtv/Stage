
dnl -----------------------------------------------------------------------
dnl Stage Autoconf script
dnl $Id: configure.in,v 1.28.2.9.2.1 2003-12-05 03:10:25 gerkey Exp $
dnl -----------------------------------------------------------------------

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.cc)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $host in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac


dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)

dnl Define this so that we can refer to it twice below
dnl PS_VERSION is the major.minor version that is common for Player and
dnl Stage. All revisions with this major.minor version must be forwards 
dnl and backwards compatible. This number is used for the install directories.
define(PS_VERSION,1.3)

dnl STAGE_VERSION is major.minor.revision - unique to this release and 
dnl independent of Player's revision number
define(STAGE_VERSION,PS_VERSION.3)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(stage-src,STAGE_VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h values.h)

dnl Check for types that are not defined on some systems
dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply dnl use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Checks for library functions.
AC_REPLACE_FUNCS(poll dirname)
AC_CHECK_LIB(z, gzopen)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)

dnl **********************************************************************
dnl Begin GUI configuration
dnl **********************************************************************

dnl This macro does all the checking for RTK, taking into account --prefix
dnl and --with-rtk.  Please don't change this macro, unless you also change 
dnl the version in player/m4.d/drivertests.m4.
AC_DEFUN([RTK_CHECK],[
dnl where's RTK?
AC_ARG_WITH(rtk, [  --with-rtk=dir          Location of RTK],
RTK_DIR=$with_rtk,
RTK_DIR=$prefix)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

AC_CHECK_PROG([have_gtk], [gtk-config], [yes], [no])
if test "x$have_gtk" = "xyes"; then
  if test "x$RTK_DIR" = "xNONE"; then
    AC_CHECK_LIB(rtk,rtk_init,
      AC_CHECK_LIB(rtk,LIBRTK_VERSION_2_2,
        with_rtk=yes,
        AC_MSG_WARN([Your librtk installation is too old (< 2.2).])
        AC_MSG_WARN([Either download a newer version of librtk])
        AC_MSG_WARN([or pass --without-rtk to configure.])
        AC_MSG_ERROR([RTK is too old]),
        [$LIBJPEG `gtk-config --libs gtk gthread`]),
      with_rtk=no,
      [$LIBJPEG `gtk-config --libs gtk gthread`])
    RTK_CPPFLAGS="`gtk-config --cflags`"
    RTK_LDADD="-lrtk $LIBJPEG `gtk-config --libs gtk gthread`"
  elif test ! "x$RTK_DIR" = "xno"; then
    AC_CHECK_LIB(rtk,rtk_init,
      AC_CHECK_LIB(rtk,LIBRTK_VERSION_2_2,
        with_rtk=yes
        RTK_CPPFLAGS="-I$RTK_DIR/include `gtk-config --cflags`"
        RTK_LDADD="-L$RTK_DIR/lib -lrtk $LIBJPEG `gtk-config --libs gtk gthread`",
        AC_MSG_WARN([Your librtk installation is too old (< 2.2).])
        AC_MSG_WARN([Either download a newer version of librtk])
        AC_MSG_WARN([or pass --without-rtk to configure.])
        AC_MSG_ERROR([RTK is too old]),
        [-L$RTK_DIR/lib $LIBJPEG `gtk-config --libs gtk gthread`]),
      with_rtk=no,
      [-L$RTK_DIR/lib $LIBJPEG `gtk-config --libs gtk gthread`])
  fi
else
  with_rtk=no
fi
if test "x$with_rtk" = "xno"; then
  AC_MSG_WARN([***************************************************])
  AC_MSG_WARN([Couldn't find RTK so I won't build RTK-based GUIs])
  AC_MSG_WARN([Maybe you should download and install RTK?])
  AC_MSG_WARN([If you have RTK installed, try --with-rtk=path])
  AC_MSG_WARN([***************************************************])
fi
AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)
AC_SUBST(RTK_CPPFLAGS)
AC_SUBST(RTK_LDADD)
])

dnl invoke above macro
RTK_CHECK

dnl Based on which GUI we're using (assuming there are ever more than one),
dnl set some variables that will used during the build.
if test "x$with_rtk" = "xyes"; then
  with_gui=yes
  AC_DEFINE(INCLUDE_RTK2,1,[include the RTK GUI])
  GUI_LIB=librtkstage.a
  GUI_LIBPATH=rtkstage/$GUI_LIB
  GUI_LDADD=$RTK_LDADD
  GUI_CPPFLAGS=$RTK_CPPFLAGS
else
  with_gui=no
fi
AC_SUBST(GUI_LIB)
AC_SUBST(GUI_LIBPATH)
AC_SUBST(GUI_LDADD)
AC_SUBST(GUI_CPPFLAGS)

dnl **********************************************************************
dnl End GUI configuration
dnl **********************************************************************

dnl **********************************************************************
dnl Begin Player configuration
dnl **********************************************************************

AC_DEFUN([PLAYER_CHECK],[
dnl where's player?
AC_ARG_WITH(player, [   --with-player=dir      Location of Player (installation or source)],
PLAYER_DIR=$with_player,
PLAYER_DIR=$prefix)

if test "x$PLAYER_DIR" = "xNONE"; then
  AC_CHECK_HEADER(player.h,
                  with_player=yes
                  PLAYER_CPPFLAGS=""
                  PLAYER_LDADD="-lplayerpacket -lplayerqueue -lplayerclient",
                  with_player=no)
else
  AC_MSG_CHECKING(for $PLAYER_DIR/include/player.h)
  if test -f $PLAYER_DIR/include/player.h; then
    AC_MSG_RESULT(yes)
    PLAYER_CPPFLAGS="-I$PLAYER_DIR/include"
    PLAYER_LDADD="-L$PLAYER_DIR/lib -lplayerqueue -lplayerpacket -lplayerclient"
  elif test -f $PLAYER_DIR/server/player.h; then
    AC_MSG_RESULT(yes)
    PLAYER_CPPFLAGS="-I$PLAYER_DIR/server -I$PLAYER_DIR/server/drivers/stage -I$PLAYER_DIR/client_libs/libplayerpacket -I$PLAYER_DIR/client_libs/c -I$PLAYER_DIR/client_libs/c++"
    PLAYER_LDADD="-L$PLAYER_DIR/server -lplayerqueue -L$PLAYER_DIR/client_libs/libplayerpacket -lplayerpacket -L$PLAYER_DIR/client_libs/c++ -lplayerclient"
  else
    with_player=no
  fi
fi

if test "x$with_player" = "xno"; then
  AC_MSG_RESULT([Could not find player.h.  Player is required to build Stage.])
  AC_MSG_RESULT([You can specify a path to Player like this:])
  AC_MSG_RESULT([    ./configure --with-player=<Player prefix dir>])
  AC_MSG_ERROR([Configuration aborted. Fix the Player path.])
fi

AC_SUBST(PLAYER_CPPFLAGS)
AC_SUBST(PLAYER_LDADD)
])

PLAYER_CHECK

dnl **********************************************************************
dnl End Player configuration
dnl **********************************************************************

dnl where's the X11-style color database?
AC_CHECK_FILE([/usr/X11R6/lib/X11/rgb.txt],
  CDB="\"/usr/X11R6/lib/X11/rgb.txt\"",
  AC_CHECK_FILE([/usr/openwin/lib/X11/rgb.txt],
    CDB="\"/usr/openwin/lib/X11/rgb.txt\"",
    CDB="\"/usr/X11R6/lib/X11/rgb.txt\""))
AC_ARG_WITH(color, [   --with-color=file      Location of X11-style color file],
CDB="\"$with_color\"",)
AC_DEFINE_UNQUOTED(COLOR_DATABASE,$CDB,[the X11-style color database])

dnl should tests (e.g., RTK) be built?
AC_ARG_WITH(tests, [  --with-tests            Build tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

AC_OUTPUT(Makefile 
          src/Makefile 
	  src/models/Makefile	
	  src/rtkstage/Makefile
          worlds/Makefile 
          tools/Makefile)

dnl should use AC_MSG_NOTICE(), but that's apparently not defined in
dnl autoconf 2.13.
AC_MSG_RESULT([])
AC_MSG_RESULT([*************************************************************])
AC_MSG_RESULT([])
AC_MSG_RESULT([Stage will be built on a $build system to run])
AC_MSG_RESULT([on a $host system, with the following tools:])
AC_MSG_RESULT([  C   compiler: $CC $CFLAGS])
AC_MSG_RESULT([  C++ compiler: $CXX $CXXFLAGS])
AC_MSG_RESULT([])
AC_MSG_RESULT([Stage will build against Player using:])
AC_MSG_RESULT([  CPPFLAGS: $PLAYER_CPPFLAGS])
AC_MSG_RESULT([  LDFLAGS: $PLAYER_LDADD])
AC_MSG_RESULT([])
if test "x$with_gui" = "xno"; then
  AC_MSG_RESULT([Stage will NOT build any GUI.])
  AC_MSG_RESULT([])	
else
  AC_MSG_RESULT([Stage will build a GUI using:])
  AC_MSG_RESULT([  CPPFLAGS: $GUI_CPPFLAGS])
  AC_MSG_RESULT([  LDFLAGS: $GUI_LDADD])
  AC_MSG_RESULT([])
fi
AC_MSG_RESULT([Stage will be installed in:])
AC_MSG_RESULT([    $prefix/])
AC_MSG_RESULT([])
AC_MSG_RESULT([To see the configuration options, do:])
AC_MSG_RESULT([    ./configure --help])
AC_MSG_RESULT([])
AC_MSG_RESULT([When you're satisfied with the configuration, type 'make install'. ])
AC_MSG_RESULT([])
