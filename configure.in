
dnl -----------------------------------------------------------------------
dnl Stage Autoconf script
dnl $Id: configure.in,v 1.28.2.9.2.6 2004-11-12 23:47:52 gerkey Exp $
dnl -----------------------------------------------------------------------

dnl Process this file with autoconf to produce a configure script.
AC_INIT(stage,1.3.5)
AC_CONFIG_SRCDIR(src/main.cc)

AC_PREREQ(2.53)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $host in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(1.7)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h values.h)

dnl Check for types that are not defined on some systems
dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply dnl use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Checks for library functions.
AC_REPLACE_FUNCS(poll dirname)
AC_CHECK_LIB(z, gzopen)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)

dnl **********************************************************************
dnl Begin GUI configuration
dnl **********************************************************************

AC_CHECK_PROG(have_pkg_config,pkg-config,yes,no)
if test "x$have_pkg_config" = "xno"; then
  AC_MSG_WARN([You should really install pkg-config])
  AC_MSG_ERROR([Can't locate Player without pkg-config.])
fi

dnl add prefix to the pkg-config path in case RTK or Stage was
dnl installed there and the user didn't add it manually 
export PKG_CONFIG_PATH=$prefix/lib/pkgconfig:$PKG_CONFIG_PATH

AC_MSG_RESULT([pkg-config searching for librtk2.pc in $PKG_CONFIG_PATH]) 
PKG_CHECK_MODULES(RTK, librtk2 >= 2.2,
  with_rtk=yes
  AC_DEFINE(INCLUDE_RTK2,1,[building optional RTK GUI components]),
  with_rtk=no
  AC_MSG_WARN([no suitable RTK was found])
)

dnl Based on which GUI we're using (assuming there are ever more than one),
dnl set some variables that will used during the build.
if test "x$with_rtk" = "xyes"; then
  with_gui=yes
  AC_DEFINE(INCLUDE_RTK2,1,[include the RTK GUI])
  GUI_LIB=librtkstage.a
  GUI_LIBPATH=rtkstage/$GUI_LIB
  GUI_LDADD=$RTK_LIBS
  GUI_CPPFLAGS=$RTK_CFLAGS
else
  with_gui=no
fi
AC_SUBST(GUI_LIB)
AC_SUBST(GUI_LIBPATH)
AC_SUBST(GUI_LDADD)
AC_SUBST(GUI_CPPFLAGS)

AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)

dnl **********************************************************************
dnl End GUI configuration
dnl **********************************************************************

dnl **********************************************************************
dnl Begin Player configuration
dnl **********************************************************************

AC_MSG_RESULT([pkg-config searching for librtk2.pc in $PKG_CONFIG_PATH]) 
PKG_CHECK_MODULES(PLAYER, player >= 1.6,,
  AC_MSG_ERROR([Player is *required* to build Stage])
)


dnl **********************************************************************
dnl End Player configuration
dnl **********************************************************************

dnl where's the X11-style color database?
AC_CHECK_FILE([/usr/X11R6/lib/X11/rgb.txt],
  CDB="\"/usr/X11R6/lib/X11/rgb.txt\"",
  AC_CHECK_FILE([/usr/openwin/lib/X11/rgb.txt],
    CDB="\"/usr/openwin/lib/X11/rgb.txt\"",
    CDB="\"/usr/X11R6/lib/X11/rgb.txt\""))
AC_ARG_WITH(color, [   --with-color=file      Location of X11-style color file],
CDB="\"$with_color\"",)
AC_DEFINE_UNQUOTED(COLOR_DATABASE,$CDB,[the X11-style color database])

dnl should tests (e.g., RTK) be built?
AC_ARG_WITH(tests, [  --with-tests            Build tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

AC_OUTPUT(Makefile 
          src/Makefile 
	  src/models/Makefile	
	  src/rtkstage/Makefile
          worlds/Makefile 
          tools/Makefile)

dnl should use AC_MSG_NOTICE(), but that's apparently not defined in
dnl autoconf 2.13.
AC_MSG_RESULT([])
AC_MSG_RESULT([*************************************************************])
AC_MSG_RESULT([])
AC_MSG_RESULT([Stage will be built on a $build system to run])
AC_MSG_RESULT([on a $host system, with the following tools:])
AC_MSG_RESULT([  C   compiler: $CC $CFLAGS])
AC_MSG_RESULT([  C++ compiler: $CXX $CXXFLAGS])
AC_MSG_RESULT([])
AC_MSG_RESULT([Stage will build against Player using:])
AC_MSG_RESULT([  CFLAGS: $PLAYER_CFLAGS])
AC_MSG_RESULT([  LIBS: $PLAYER_LIBS])
AC_MSG_RESULT([])
if test "x$with_gui" = "xno"; then
  AC_MSG_RESULT([Stage will NOT build any GUI.])
  AC_MSG_RESULT([])	
else
  AC_MSG_RESULT([Stage will build a GUI using:])
  AC_MSG_RESULT([  CFLAGS: $GUI_CPPFLAGS])
  AC_MSG_RESULT([  LIBS $GUI_LDADD])
  AC_MSG_RESULT([])
fi
AC_MSG_RESULT([Stage will be installed in:])
AC_MSG_RESULT([    $prefix/])
AC_MSG_RESULT([])
AC_MSG_RESULT([To see the configuration options, do:])
AC_MSG_RESULT([    ./configure --help])
AC_MSG_RESULT([])
AC_MSG_RESULT([When you're satisfied with the configuration, type 'make install'. ])
AC_MSG_RESULT([])
